const asyncHandler = require('express-async-handler');
// const Attempt = require('../models/attemptModel'); // For real DB
const { mockAttempts } = require('../models/attemptModel');
const { mockUsers } = require('../models/userModel');
const { mockPapers } = require('../models/paperModel');


// @desc    Create a new attempt
// @route   POST /api/attempts
// @access  Private
const createAttempt = asyncHandler(async (req, res) => {
    const {
        paperId, // The string ID like 'econ-9708-21-mj-23'
        attemptIdString, // The one generated by frontend
        duration,
        answerText,
        fileName,
        grade,
        score,
        totalMarks,
        feedback,
        outline,
        highlight_references
    } = req.body;

    if (!paperId || !attemptIdString) {
        res.status(400);
        throw new Error('Paper ID and Attempt ID String are required');
    }

    const paperExists = mockPapers.find(p => p.id === paperId);
    if (!paperExists) {
        res.status(404);
        throw new Error('Associated paper not found');
    }

    const newAttempt = {
        user: req.user._id, // From protect middleware
        paper: paperId,
        attemptIdString,
        duration,
        answerText,
        fileName,
        grade,
        score,
        totalMarks: totalMarks || paperExists.totalMarks, // Use paper's totalMarks if not provided
        feedback,
        outline,
        highlight_references,
        createdAt: new Date().toISOString(), // Mock timestamp
        updatedAt: new Date().toISOString(),
    };

    mockAttempts.push(newAttempt);
    console.log(`Created mock attempt for user ${req.user.email}, paper ${paperId}`);
    res.status(201).json(newAttempt);
});

// @desc    Get attempts for the logged-in user
// @route   GET /api/attempts/myattempts
// @access  Private
const getMyAttempts = asyncHandler(async (req, res) => {
    const userAttempts = mockAttempts.filter(attempt => attempt.user === req.user._id);
    res.json(userAttempts);
});

// @desc    Get a single attempt by its string ID
// @route   GET /api/attempts/:attemptIdString
// @access  Private (user can only get their own attempt)
const getAttemptByIdString = asyncHandler(async (req, res) => {
    const attempt = mockAttempts.find(
        att => att.attemptIdString === req.params.attemptIdString && att.user === req.user._id
    );

    if (attempt) {
        res.json(attempt);
    } else {
        res.status(404);
        throw new Error('Attempt not found or not authorized');
    }
});

// @desc    Delete an attempt by its string ID
// @route   DELETE /api/attempts/:attemptIdString
// @access  Private
const deleteAttempt = asyncHandler(async (req, res) => {
    const attemptIndex = mockAttempts.findIndex(
        att => att.attemptIdString === req.params.attemptIdString && att.user === req.user._id
    );

    if (attemptIndex > -1) {
        mockAttempts.splice(attemptIndex, 1);
        console.log(`Deleted mock attempt ${req.params.attemptIdString} for user ${req.user.email}`);
        res.json({ message: 'Attempt removed' });
    } else {
        res.status(404);
        throw new Error('Attempt not found or not authorized to delete');
    }
});


module.exports = {
    createAttempt,
    getMyAttempts,
    getAttemptByIdString,
    deleteAttempt,
};